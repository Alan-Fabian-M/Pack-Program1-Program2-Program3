//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TForm1::FormCreate(TObject *Sender)
{ nomArch= "Alumnos.dat";
  nomIdxCod= "codi.idx";
pf = new fstream(nomArch.c_str(), ios::in | ios:: binary );
pIdx= new fstream(nomIdxCod.c_str(), ios:: in |ios:: binary );
 if (pf->fail()) {
  delete(pf);
  pf= new fstream(nomArch.c_str(), ios:: out | ios :: binary);
 }
 pf->close();
 delete(pf);
}
//---------------------------------------------------------------------------
void __fastcall TForm1::FormClose(TObject *Sender, TCloseAction &Action)
{
 if (pf->is_open()) {
	 pf->flush();
	 pIdx->flush();
	 pf->close();
	 pIdx->close();
	 delete (pIdx);
	 delete (pf);
 }

}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button1Click(TObject *Sender)
{  bool hallado= false;
	AnsiString cad;
	RegAlumno reg,regNuevo ;
	regNuevo.mark='0';
	regNuevo.cod = StrToInt(Edit1->Text);
	cad= Edit2 ->Text;
	strcpy(regNuevo.nom, cad.c_str());
	cad= Edit3->Text;
	strcpy(regNuevo.dir, cad.c_str());
	cad= MaskEdit1->Text;
	regNuevo.fecha.dia= StrToInt(cad.SubString(1,2));
	regNuevo.fecha.mes= StrToInt(cad.SubString(4,2));
	regNuevo.fecha.ano= StrToInt(cad.SubString(7,4));
	pf= new fstream(nomArch.c_str(), ios::in |ios:: out |ios::binary );
	if (pf->is_open()) {
	 do{
	  pf ->read((char*)&reg, sizeof (reg));
	  hallado = (reg.cod == regNuevo.cod)&&(reg.mark!='*');
	 }while (!hallado && !pf->eof());
	 if (hallado)
	   pf ->seekg(-sizeof(reg), ios::cur);
	 else
		pf->seekg(0,ios::end);
	 pf->write((char*)&regNuevo, sizeof (regNuevo));
	 Edit2->Text = "" ; Edit3->Text=""; MaskEdit1->Text="";
	 Edit1->SetFocus();
	 pf->close();
	}
	pf->flush();
	pf->close();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Edit1Exit(TObject *Sender)
{ bool hallado= false;
RegAlumno reg;
Word codi;
codi= StrToInt(Edit1->Text);
pf= new fstream(nomArch.c_str(), ios:: in| ios :: binary );
 if (pf->is_open()) {
	 do{
	  pf->read((char*)&reg, sizeof (reg));
	  hallado = (reg.cod==codi)&&(reg.mark!='*');

	 } while (!hallado && !pf->eof());


	 if (hallado ) {
	  Edit2->Text= reg.nom;
	  Edit3->Text= reg.dir;
	  MaskEdit1->Text= IntToStr(reg.fecha.dia)+"/"+ IntToStr(reg.fecha.mes)+"/"+IntToStr(reg.fecha.ano);
	  Edit2->SetFocus();

	 }else{
		 // sino limpiar la pantalla
		 Edit2->Text = "" ; Edit3->Text=""; MaskEdit1->Text="";
	 }
 }
 pf->close();
 delete(pf);


}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button2Click(TObject *Sender)
{ bool hallado = false;
 RegAlumno reg;
 Word cod; reg.mark='0';
 cod=StrToInt(Edit1->Text);
 pf= new fstream(nomArch.c_str(), ios::in |ios::out |ios:: binary);
 if (pf->is_open()) {
	 do{
		 pf ->read ((char*)&reg, sizeof(reg));
		 hallado=(reg.cod==cod)&&(reg.mark!='*');
	 } while (!hallado && !pf->eof());
	 if (hallado) {
	  reg.mark='*'; // marcado como borrado
	  pf->seekg(-sizeof(reg), ios::cur);
	  pf->write((char*)&reg, sizeof(reg));
	  //Limpiar();
	  Edit1->Text=""; Edit2->Text = "" ; Edit3->Text=""; MaskEdit1->Text="";
	  Edit1->SetFocus();
	 }
 }
 pf->close();
 delete(pf);

}
//---------------------------------------------------------------------------

void __fastcall TForm1::Porcodigo1Click(TObject *Sender)
{ RegAlumno reg;
  RegIdxCod regIdx;
  fstream pix(nomIdxCod.c_str(), ios::out|ios::trunc|ios::binary);
  pf=new fstream(nomArch.c_str(), ios::in| ios::binary);
  do{
   regIdx.pos = pf->tellp();
   pf->read((char *)&reg, sizeof(reg));
   if (!pf->eof() && (reg.mark!='*')) {
	   regIdx.cod= reg.cod;
	   pix.write((char *)&regIdx, sizeof(regIdx));

   }

  } while (!pf->eof());
  pf->close();
  delete(pf);
  pix.flush();
  pix.close();




}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button4Click(TObject *Sender)
{ RegIdxCod reg;
  RegAlumno regA;
  Button5->Enabled = true;
  Button6->Enabled = true;
  Button7->Enabled = true;
  pf = new fstream(nomArch.c_str(), ios::in| ios :: binary );
  pIdx= new fstream(nomIdxCod.c_str(), ios:: in |ios:: binary );
  if (pIdx->is_open()) {
   pIdx->read((char*)&reg, sizeof(reg));
	if (!pIdx->eof()) {
	  pf->seekp(reg.pos,ios::beg);
	  pf->read((char*)&regA, sizeof(regA));
	  Edit1->Text= regA.cod;
	  Edit2->Text= regA.nom;
	  Edit3->Text= regA.dir;
	  MaskEdit1->Text= IntToStr(regA.fecha.dia)+"/"+ IntToStr(regA.fecha.mes)+"/"+IntToStr(regA.fecha.ano);

	}

  }



}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button7Click(TObject *Sender)
{
 if (pf->is_open()) {
   pf->close();
   pIdx->close();
   delete(pf);
   delete(pIdx);
   Button4->Enabled= false;
   Button5->Enabled= false;
   Button6->Enabled= false;
 }



}
//---------------------------------------------------------------------------



void __fastcall TForm1::Button6Click(TObject *Sender)
{
 RegIdxCod reg;
 RegAlumno regA;
 if (pIdx->is_open()) {
  pIdx->read((char *)&reg, sizeof(reg));
  if (!pIdx->eof()) {
	pf->seekp(reg.pos,ios::beg);
	pf->read((char *)&regA, sizeof(regA));
	Edit1->Text = regA.cod;
	Edit2->Text = regA.nom;
	Edit3->Text = regA.dir;
	MaskEdit1->Text = IntToStr(regA.fecha.dia)+"/"+ IntToStr(regA.fecha.mes)+"/"+IntToStr(regA.fecha.ano);
	Button6->Enabled= true;
	Button7->Enabled= true;

  } else{
	  pIdx->close();
	  delete(pIdx);
	  pIdx = new fstream(nomIdxCod.c_str(), ios::in | ios::binary);
	  pIdx->seekp(0, ios::end);
	  Button6->Enabled= false;  // anulamos el avance hacia adelante
	  Button5->Enabled= true; // habilitamos el avance hacia atras
	  Edit1->Text = "";
	  Edit2->Text = "";
	  Edit3->Text = "";
	  MaskEdit1->Text = "";

  }

 }

}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button5Click(TObject *Sender)
{ RegIdxCod reg;
  RegAlumno regA;
  Cardinal p ;
  if (pIdx->is_open()) {
   p = pIdx->tellp(); // saca la posicion de donde esta apuntando pIdx
   if (p<= sizeof(reg)) { //  si esta en el primer registro
	 Button5->Enabled = false;
   } else {
	   pIdx->seekp(-2*sizeof(reg), ios::cur);
	   pIdx->read((char *)&reg, sizeof (reg));
	   if (!pIdx->eof()) {
		pf ->seekp(reg.pos, ios::beg);
		pf->read((char *) &regA	, sizeof(regA));
		Edit1->Text= regA.cod;
		Edit2->Text= regA.nom;
		Edit3->Text= regA.dir;
		MaskEdit1->Text=IntToStr(regA.fecha.dia)+"/"+ IntToStr(regA.fecha.mes)+"/"+IntToStr(regA.fecha.ano);
		Button5->Enabled = true;
		Button6->Enabled = true;

	   }
   }

  }

}
//---------------------------------------------------------------------------

void __fastcall TForm1::porcodigo2Click(TObject *Sender)
{
  fstream f(nomIdxCod.c_str(),ios::in|ios::out|ios::binary);
  RegIdxCod reg,regM;
  bool fin=false;
  Cardinal p,i,pm,z;
  if (f.is_open()) {
	p=0;
	while (!fin){
	  i=0; pm=p;
	  f.seekg(p);//,ios::beg);//al inicio del archivo
	  while (!f.eof()){ //busca el menor
		 if (p==f.tellp()){//si es el primer registro
			f.read((char *)&reg,sizeof(reg));
			regM=reg;
			z=f.tellp();
		 } else {
			f.read((char *)&reg,sizeof(reg));
			z=f.tellp();
		 }
		 if (!f.eof()) {
			i++;
			if (reg.cod<regM.cod) {
			   regM=reg;
			   pm=f.tellp()-sizeof(reg);
			}
		 }
	  }
	  fin= i<=1;
	 if (!fin) {
	  f.close();
	  f.open(nomIdxCod.c_str(), ios::in|ios::out|ios::binary);
	  f.seekg(p);
	  f.seekp(p);
	  z = f.tellp(); // intercambia el menor
	  if (p!=pm) {
	  f.read((char *)&reg, sizeof(reg));
	  z = f.tellp();
	  f.seekp(p); //, ios::beg
	  z = f.tellp();
	  f.write((char *)&	regM, sizeof(reg));
	  z= f.tellp();
	  f.seekp(pm); //, ios :: beg
	  z= f.tellp();
	  f.write((char *)&reg,sizeof(reg));
	  z- f.tellp();
	  }
	 }
	 p = p + sizeof (reg);
	}


	/*
	reg.cod=25; reg.pos=50;  f.write((char*)&reg,sizeof(reg));
	reg.cod=30; reg.pos=300; f.write((char*)&reg,sizeof(reg));
	reg.cod=40; reg.pos=250; f.write((char*)&reg,sizeof(reg));
	reg.cod=50; reg.pos=200; f.write((char*)&reg,sizeof(reg));
	reg.cod=70; reg.pos=350; f.write((char*)&reg,sizeof(reg));
	f.close();*/
  }
}
//---------------------------------------------------------------------------




void __fastcall TForm1::actualizar1Click(TObject *Sender)
{ RegAlumno regA, regAux; byte i; AnsiString t;
	fstream pf(nomArch.c_str(), ios ::in|ios::out |ios::binary);
	if (!pf.fail()) {
			pf.read((char *)&regA, sizeof(regA));
	 for (i = 0; i < 21; i++) {
	   regA.nom[i]= UpCase(regA.nom[i]);
       pf.write((char *)&regA, sizeof(regA));
	 }
	 pf.flush();
	 pf.close();
	}



}
//---------------------------------------------------------------------------

